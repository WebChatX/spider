var SpiderClient=function(e){"use strict";const n={loginSpider:"LOGIN_SPIDER",logoutSpider:"LOGOUT_SPIDER"},s=Object.values(n);class t{constructor(e,n,t,i){if(!s.includes(e))throw new Error(`Unsupported message type: ${e}`);this.msgType=e,this.data=n,this.senderID=t,this.receiverID=i}static serialize(e){return JSON.stringify(e)}static deserialize(e){return JSON.parse(e)}static createMsg(e,n,s,i){const o=new t(e,n,s,i);return t.serialize(o)}}return e.SpiderClientEngine=class{constructor(e,n){this.socketID=n,this._initEngine(e)}_initEngine(e){this.engine=new WebSocket(e),this.engine.onopen=()=>{console.log("------open------")},this.engine.onclose=()=>{console.log("------close------")},this.engine.onerror=()=>{console.log("------error------")},this.engine.onmessage=()=>{console.log("------message------")}}connect(){console.log("------connect------");const e=t.createMsg(n.loginSpider,null,this.socketID,null);this.engine.send(e)}disconnect(){console.log("------disconnect------");const e=t.createMsg(n.logoutSpider,null,this.socketID,null);this.engine.send(e)}},e}({});
