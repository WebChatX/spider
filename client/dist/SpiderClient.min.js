var SpiderClient=function(e){"use strict";const n={loginSpider:"LOGIN_SPIDER",logoutSpider:"LOGOUT_SPIDER"},s=Object.values(n);class i{constructor(e,n,i,t){if(!s.includes(e))throw new Error(`Unsupported message type: ${e}`);this.msgType=e,this.data=n,this.senderID=i,this.receiverID=t}static serialize(e){return JSON.stringify(e)}static deserialize(e){return JSON.parse(e)}static createMsg(e,n,s,t){const o=new i(e,n,s,t);return i.serialize(o)}}return e.SpiderClientEngine=class{constructor(e,n){this.socketID=n,this._initEngine(e)}_initEngine(e){this.engine=new WebSocket(e),this.engine.onopen=e=>this._openHandler(e),this.engine.onclose=e=>this._closeHandler(e),this.engine.onerror=e=>this._errorHandler(e),this.engine.onmessage=e=>this._messageHandler(e)}_openHandler(e){console.log("------open------");const s=i.createMsg(n.loginSpider,null,this.socketID,null);this.engine.send(s)}_closeHandler(e){console.log("------close------")}_errorHandler(e){console.log("------error------")}_messageHandler(e){console.log("------message------")}disconnect(){console.log("------disconnect------");const e=i.createMsg(n.logoutSpider,null,this.socketID,null);this.engine.send(e),this.engine.close()}},e}({});
