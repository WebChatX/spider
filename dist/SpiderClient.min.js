var SpiderClient=function(e){"use strict";const s={loginSpider:"LOGIN_SPIDER",logoutSpider:"LOGOUT_SPIDER",customMessage:"CUSTOM_MESSAGE"},n=Object.values(s);class t{constructor(e,s,t,i,r=!1){if(!n.includes(e))throw new Error(`Unsupported message type: ${e}`);this.msgType=e,this.data=s,this.senderID=t,this.receiverID=i,this.isCustom=r}static serialize(e){return JSON.stringify(e)}static deserialize(e){return JSON.parse(e)}static createMsg(e,s,n,i){const r=new t(e,s,n,i);return t.serialize(r)}}return e.SpiderClientEngine=class{constructor(e,s){this.url=e,this.socketID=s,this._initEngine()}_initEngine(){this.engine=new WebSocket(this.url),this.engine.onopen=e=>this._openHandler(e),this.engine.onclose=e=>this._closeHandler(e),this.engine.onerror=e=>this._errorHandler(e),this.engine.onmessage=e=>this._messageHandler(e)}_openHandler(e){const n=t.createMsg(s.loginSpider,null,this.socketID,null);this.engine.send(n)}_closeHandler(e){console.log("------close------")}_errorHandler(e){console.log("------error------")}_messageHandler(e){console.log("------message------"),console.log(e.data)}disconnect(){const e=t.createMsg(s.logoutSpider,null,this.socketID,null);this.engine.send(e),this.engine.close()}send(e,s,n){}},e}({});
